plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {}

loom {
	splitEnvironmentSourceSets()

	mods {
		"censorit" {
			sourceSet sourceSets.main
		}
	}

}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// HOCON configuration library
	implementation "com.typesafe:config:1.4.3"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}


// Custom task to rename the final jar
task renameJar {
	doLast {
		// Rename the main jar
		def originalJar = file("build/libs/${project.archives_base_name}-${project.mod_version}.jar")
		def newJar = file("build/libs/CensorIt-${project.mod_version}+${project.minecraft_version}.jar")
		
		if (originalJar.exists()) {
			originalJar.renameTo(newJar)
			println "Renamed jar to: ${newJar.name}"
		}
		
		// Also rename the sources jar if it exists
		def originalSourcesJar = file("build/libs/${project.archives_base_name}-${project.mod_version}-sources.jar")
		def newSourcesJar = file("build/libs/CensorIt-${project.mod_version}+${project.minecraft_version}-sources.jar")
		
		if (originalSourcesJar.exists()) {
			originalSourcesJar.renameTo(newSourcesJar)
			println "Renamed sources jar to: ${newSourcesJar.name}"
		}
	}
}

// Make the rename task run after build tasks
build.finalizedBy renameJar

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}